Project 4 Members: Walter Ashworth and Andy Zeng
Github Link: https://github.com/washwor1/cs302project4

Benchmark Markup:
| N    	| Elapsed Time 	| Memory Usage (kybtes) 	|
|------	|--------------	|-----------------------	|
| 10   	| 0:00.00      	| 1588                  	|
| 20   	| 0:00.00      	| 1596                  	|
| 50   	| 0:00.01      	| 1648                  	|
| 100  	| 0:00.01      	| 1776                  	|
| 200  	| 0:00.03      	| 2196                  	|
| 500  	| 0:00.25      	| 4036                  	|
| 1000 	| 0:01.14      	| 11392                 	|

Individual Contributions:
    Andy: Created the generate_map.cpp, ran the benchmark, help on getting input from the files, and help on edge cases.

    Walter: Figuring out majority of the implementation of Dijkstra's Algorithm.

Report:
1. My representation was essentially an adjacency list as my grid would be considered individual nodes or vertices, the backedges were the edges, and the weights were the distances.

2. For my implementation, I used 4 vectors and a multimap. Each of the vectors were used to keep track of 1 attribute of each node (distance,backedge,visited,weight/position) and the multimap was used to keep track of which paths were open and auto sort them by distance.

3. After timing my implementation, it seems as if my time complexity is seems to be between O(V) and O(V^2). This seems accurate based on the reported time complexity on wikipedia being between (v+e)log(v) and v^2. For memory complexity it seems almost linear with respect to V which makes sense based on the fact that my vectors will take up V space no matter the grid.